var fs      = require('fs');
var path    = require('path');
var normall = require('normall');

function formatSimpleTag(htmlTag, node) {
    return { xml: node.name, html: htmlTag };
}

module.exports = {
    'text:h': function(node) {
        var tag = 'h';

        var level = node.attributes['text:outline-level'];
        if (level > 6) {
            level = 6;
        }
        tag += level;

        return { xml: node.name, html: tag };
    },
    'text:a': function(node) {
        var tag = 'a';
        var attrs = [{
            name: 'href',
            value: node.attributes['xlink:href']
        }];

        return { xml: node.name, html: tag, attrs: attrs };
    },
    'draw:frame': function(node, styles, footnotes, frames, opts, odt) {
        var name = node.attributes['draw:name'];
        frames.current = { name: name };
    },
    'draw:image': function(node, styles, footnotes, frames, opts, odt) {
        // Path to image in odt
        var archiveFilepath = node.attributes['xlink:href'];
        var imgFile = odt.getEntry(archiveFilepath);
        // Image file not present in odt
        if (!imgFile) {
            console.log('Skipping missing image from ODT: ', archiveFilepath);
            return;
        }

        var imgSrc;

        // Insert image inline
        if (!opts.imgFolder) {
            var imgContent = imgFile.getData().toString('base64');
            imgSrc = 'data:image;base64,'+imgContent;
        }
        // Export image
        else {
            // Construct definitive filename
            var imgFilename;
            var ext = path.extname(archiveFilepath);

            // Read image name from frames
            if (!!frames.current) {
                imgFilename = frames.current.name;
            } else {
                imgFilename = path.basename(archiveFilepath, ext);
            }

            // Ensure correct filename and append filetype
            imgFilename = normall.filename(imgFilename);
            imgFilename += ext;

            // Export from archive
            odt.extractEntryTo(archiveFilepath, opts.imgFolder, false, true);

            // Rename extracted file
            var exportedFilepath = path.join(opts.imgFolder, path.basename(archiveFilepath));
            var imgFilepath = path.join(opts.imgFolder, imgFilename);
            fs.renameSync(exportedFilepath, imgFilepath);
            imgSrc = imgFilepath;
        }

        var tag = 'img';
        var attrs = [{
            name: 'src',
            value: imgSrc
        }];

        return { xml: node.name, html: tag, attrs: attrs, isSelfClosing: true };
    },
    'text:list': function(node, styles) {
        var styleName = node.attributes['text:style-name'];
        var listType = styles['lists'][styleName];
        var tag = null;

        if (!!listType && !!listType.tag) {
            tag = listType.tag;
        }

        // Check if nested list
        if (!!styles['lists'].openedTags.length) {
            // Take last opened tag for nested lists
            tag = styles['lists'].openedTags.slice(-1)[0];
        }

        // Default to <ul>
        tag = tag || 'ul';

        // Add to stack of opened list tags
        styles['lists'].openedTags.push(tag);

        return { xml: node.name, html: tag };
    },
    'text:p': function(node, styles, footnotes, frames, opts) {
        if (opts.trim && node.isSelfClosing) {
            return null;
        }

        return formatSimpleTag('p', node);
    },
    'text:note-citation': function(node, styles, footnotes) {
        footnotes.onId = true;
        return null;
    },
    'text:note-body': function(node, styles, footnotes) {
        footnotes.onBody = true;
        var id = footnotes.current.id;
        return '<sup id="footnote-ref-'+id+'"><a href="#footnote-'+id+'">'+id+'</a></sup>';
    },
    'text:span': formatSimpleTag.bind(null, 'span'),
    'text:list-item': formatSimpleTag.bind(null, 'li'),
    'text:line-break': formatSimpleTag.bind(null, 'br'),
    'table:table': formatSimpleTag.bind(null, 'table'),
    'table:table-row': formatSimpleTag.bind(null, 'tr'),
    'table:table-cell': formatSimpleTag.bind(null, 'td')
};